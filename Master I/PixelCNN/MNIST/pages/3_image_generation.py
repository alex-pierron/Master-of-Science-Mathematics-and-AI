import streamlit as st
from MaskedConv import *
from PixelCNN_MNIST_model import PixelCNN_MNIST
from training_loop import train_loop
from test_MNIST import test_MNIST
from PIL import Image

st.title("Generating New Images")
st.markdown('''In this section you can generate new MNIST image by using your custom model 
or our pretrained model''')
choice = st.container()

user_made = st.container()

given_model = st.container()

with choice :
    st.markdown('''Here you can choose how many images you want to generate and with which format
    for the number of lines and columns''')

    number_image = st.slider("Choose the number of image you want to generate",
                             min_value = 1, max_value = 32, value = 4, step=1)
    
    number_line = st.slider("Choose how many line you want for the exit format",
                             min_value = 1, max_value = number_image+1, value = 1, step=1)
    
    number_column = st.slider("Choose how many column you want for the exit format",
                             min_value = 1, max_value = number_image+1, value = 1, step=1)

    
with user_made:
    st.header("Generating new images with your model")
    generated_user_image = False
    if st.button("Click here to generate your images with your model"):
        user = True
        generated_image = test_MNIST(st.session_state["user_model_mnist"],
                                      st.session_state["PATH"] ,number_image ,
                                      number_column ,number_line,user=user)
        generated_user_image = True
    if generated_user_image:
        image = Image.open('pages/generated_images/user_model_image.png')
        st.image(image, caption='New Images generated by your custom network')


with given_model:
    st.header("Generating new images with the default model")
    if "given_PATH" not in st.session_state:
            st.session_state["given_PATH"] = ""

    st.session_state["given_PATH"] = "training_weight/pretrained/pretrained.pth"
    generated_image_default = False
    if st.button("Click here to generate your images with the default model"):
        user = False
        generated_image = test_MNIST(st.session_state["user_model_mnist"],
                                      st.session_state["given_PATH"] ,number_image ,
                                      number_column ,number_line,user=user)
        
        generated_image_default = True
    
    if generated_image_default:
        image = Image.open('pages/generated_images/default_model_image.png')
        st.image(image, caption='New Images generated by the default network')
    

